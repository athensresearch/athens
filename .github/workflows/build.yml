name: build

on: [push
    , pull_request
    ]

jobs:

  # scratch:
  #   runs-on: ubuntu-18.04
  #   steps:
  #     - name: Git checkout
  #       uses: actions/checkout@v1
  #       with:
  #         fetch-depth: 1
  #         submodules: 'true'
  #
  #     - name: Scratch
  #       run: |
  #         echo "Scratch"
  test:
    # ubuntu 18.04 comes with lein + java8 installed
    runs-on: ubuntu-18.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: 'true'
 
      - name: Cache deps
        uses: actions/cache@v1
        id: cache-deps
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('project.clj') }}
          restore-keys: |
                ${{ runner.os }}-maven-
      - name: Fetch deps
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          lein deps
      - name: Run tests
        run: |
          script/test/jvm
          
  lint:
    # ubuntu 18.04 comes with lein + java8 installed
    runs-on: ubuntu-18.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: 'true'
 
      - uses: DeLaGuardo/setup-clj-kondo@v1
        with:
          version: '2020.04.05'
          
      - name: Lint 
        run: |
          script/lint

  build-app:
    needs: [test]
    # ubuntu 18.04 comes with lein + java8 installed
    runs-on: ubuntu-18.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: 'true'
  
      - name: Cache deps
        uses: actions/cache@v1
        id: cache-deps
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('project.clj') }}
          restore-keys: |
                ${{ runner.os }}-maven-

      - name: Fetch deps
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          lein deps
          
      - name: Athens version
        id: athens-version
        run: |
          ATHENS_VERSION=$(echo $GITHUB_SHA | head -c 7)
          echo "##[set-output name=version;]${ATHENS_VERSION}"          
          echo "##[set-output name=release-name;]athens-app-${ATHENS_VERSION}"
          
      - name: Build app 
        run: |
          RELEASE_NAME=${{ steps.athens-version.outputs.release-name }} script/build/athens-app

      - name: Upload app
        uses: actions/upload-artifact@v1
        with:
          name: app
          path: ${{ steps.athens-version.outputs.release-name }}.tar.gz

      - name: Vercel deploy
        uses: amondnet/now-deployment@v2
        # add github secrets at https://github.com/athensresearch/athens/settings/secrets
        with:
          # only comment on pr events
          github-comment: ${{ contains(github.event_name, 'pull_request') }}
          # vercel token, generated here https://vercel.com/account/tokens
          zeit-token: ${{ secrets.VERCEL_TOKEN }} 
          # gh action built-in env
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # below two is based on vercel's project linking feature
          # instructions: https://github.com/amondnet/now-deployment#project-linking
          now-org-id: ${{ secrets.VERCEL_ORG_ID}}
          now-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          


          