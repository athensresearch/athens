name: build

on:
  push:
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    paths-ignore:
      - '*.md'
      - 'docs/**'

jobs:

   test:
     runs-on: ubuntu-18.04
     steps:
       - name: Git checkout
         uses: actions/checkout@v1
         with:
           fetch-depth: 1
           submodules: 'true'

       - name: Cache deps
         uses: actions/cache@v1
         id: cache-deps
         with:
           path: ~/.m2/repository
           key: ${{ runner.os }}-maven-${{ hashFiles('project.clj') }}
           restore-keys: ${{ runner.os }}-maven-

       - name: Fetch deps
         if: steps.cache-deps.outputs.cache-hit != 'true'
         run: lein deps

       - name: Run tests
         run: script/test/jvm

   lint:
     runs-on: ubuntu-18.04
     steps:
       - name: Git checkout
         uses: actions/checkout@v1
         with:
           fetch-depth: 1
           submodules: 'true'

       - uses: DeLaGuardo/setup-clj-kondo@v1
         with:
           version: '2020.05.09'

       - name: Lint
         run: script/lint

   style:
     runs-on: ubuntu-18.04
     steps:
       - name: Git checkout
         uses: actions/checkout@v1
         with:
           fetch-depth: 1
           submodules: 'true'

       - name: Style
         run: script/style

   carve:
     runs-on: ubuntu-18.04
     steps:
       - name: Git checkout
         uses: actions/checkout@v1
         with:
           fetch-depth: 1
           submodules: 'true'

       - uses: DeLaGuardo/setup-clojure@2.0
         with:
           tools-deps: '1.10.1.469'

       - name: Cache deps
         uses: actions/cache@v1
         id: cache-deps
         with:
           path: ~/.m2/repository
           key: ${{ runner.os }}-maven-${{ hashFiles('deps.edn') }}
           restore-keys: ${{ runner.os }}-maven-

       - name: Fetch deps
         if: steps.cache-deps.outputs.cache-hit != 'true'
         run: clojure -A:carve -Stree

       - name: Carve unused vars
         run: script/carve


   # Only deploy if a commit is pushed. This lets the previous jobs run on PRs. This also runs when a PR is merged, because a merge is a push.
#   deploy:
#     needs: [test]
#     if: github.event_name == 'push'
#     runs-on: ubuntu-18.04
#     steps:
#       - name: Git checkout
#         uses: actions/checkout@v1
#         with:
#           fetch-depth: 1
#           submodules: 'true'
#
#       - name: Restore maven
#         uses: actions/cache@v1
#         id: restore-maven
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('project.clj') }}
#           restore-keys: |
#             ${{ runner.os }}-maven-
#
#       - name: Fetch maven
#         if: steps.restore-maven.outputs.cache-hit != 'true'
#         run: lein deps
#
#       - name: Get yarn cache directory path
#         id: yarn-cache-dir-path
#         run: echo "::set-output name=dir::$(yarn cache dir)"
#
#       - name: Restore yarn
#         uses: actions/cache@v1
#         id: restore-yarn
#         with:
#           path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
#           key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-yarn-
#
#       - name: Fetch yarn
#         run: yarn install --frozen-lockfile
#
#       - name: Compile app and devcards
#         run: COMMIT_URL="https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}" script/deploy
#
#       - name: Deploy
#         uses: peaceiris/actions-gh-pages@v3
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           publish_dir: ./resources/public

   dist:
     runs-on: ${{ matrix.os }}
     env:
       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

     strategy:
       matrix:
         os: [ubuntu-latest, macos-latest] # windows-latest doesn't work yet. see https://github.com/DeLaGuardo/setup-clojure/issues/1

     steps:
       - name: Check out Git repository
         uses: actions/checkout@v1

       - uses: DeLaGuardo/setup-clojure@2.0
         with:
           tools-deps: '1.10.1.469'

       - name: Restore maven
         uses: actions/cache@v1
         id: restore-maven
         with:
           path: ~/.m2/repository
           key: ${{ runner.os }}-maven-${{ hashFiles('project.clj') }}
           restore-keys: |
             ${{ runner.os }}-maven-

       - name: Prepare java
         uses: actions/setup-java@v1
         with:
           java-version: "11.0.8"

       - name: Install leiningen
         uses: DeLaGuardo/setup-clojure@master
         with:
           lein: 2.9.4

       - name: Fetch maven
         if: steps.restore-maven.outputs.cache-hit != 'true'
         run: lein deps

       - name: Get yarn cache directory path
         id: yarn-cache-dir-path
         run: echo "::set-output name=dir::$(yarn cache dir)"

       - name: Restore yarn
         uses: actions/cache@v1
         id: restore-yarn
         with:
           path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
           key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
           restore-keys: |
             ${{ runner.os }}-yarn-

       - name: Fetch yarn
         run: yarn install --frozen-lockfile

      # runs: yarn build && electron-builder `args`
       - name: Build/release Electron app
         uses: samuelmeuli/action-electron-builder@v1
         with:
           # GitHub token, automatically provided to the action
           # (No need to define this secret in the repo settings)
           github_token: ${{ secrets.github_token }}

           # If the commit is tagged with a version (e.g. "v1.0.0"),
           # release the app after building
           release: ${{ startsWith(github.ref, 'refs/tags/v') }}
           args: "-p always"

