name: build

on:
  push:
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    paths-ignore:
      - '*.md'
      - 'docs/**'

env:
  # Github container registry https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry
  REGISTRY: ghcr.io

jobs:
   lint:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2

       # We don't use yarn lint here in order to have faster CI.
       # Keep version and script up to date!
       - uses: DeLaGuardo/setup-clj-kondo@master
         with:
           version: '2022.03.09'

       - name: Lint
         run: clj-kondo --lint src


   style:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
       - uses: ./.github/custom-actions/clojure-env

       - name: Style
         run: yarn style


   carve:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
       - uses: ./.github/custom-actions/clojure-env

       - name: Carve unused vars
         run: yarn carve


   test:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
       - uses: ./.github/custom-actions/clojure-env
       - uses: ./.github/custom-actions/node-env

       - name: Run JVM tests
         run: yarn server:test

       - name: Run Karma tests
         run: yarn client:test

       # TODO: these tests cause the test runner to never exist, so they
       # can't be ran on CI. Please run them manually for now.
       # See https://github.com/fluree/db/issues/163.
       # - name: Start Fluree process
       #   run: yarn server:fluree

       # - name: Run Fluree tests
       #   run: yarn server:test:fluree


   e2e:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
       - uses: ./.github/custom-actions/clojure-env
       - uses: ./.github/custom-actions/node-env

       # Caching the build is generally a terrible idea, but e2e is really slow
       # and shadow-cljs is usually pretty good at cache invalidation.
       # Still, if you think this cache is breaking builds, just bump the version number.
       - name: Restore shadow-cljs build cache
         uses: actions/cache@v2
         id: restore-shadow-cljs-build-cache
         with:
           path: ./.shadow-cljs
           key: ${{ runner.os }}-v2-shadow-cljs-build-cache-${{ hashFiles('yarn.lock') }}
           restore-keys: |
             ${{ runner.os }}-v2-shadow-cljs-build-cache

       - name: Compile JS assets for dev
         run: yarn client:dev-build

       - name: Run client e2e tests over dev build
         run: yarn client:e2e


   build-app:
     needs: [test, lint, style, carve]
     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
       - uses: ./.github/custom-actions/clojure-env
       - uses: ./.github/custom-actions/node-env

       - name: Compile JS Assets for production
         run: yarn prod --config-merge "{:closure-defines {athens.core/SENTRY_DSN \"${SENTRY_DSN}\" athens.util/COMMIT_URL \"${COMMIT_URL}\"}}"
         env:
           SENTRY_DSN: ${{ secrets.sentry_dsn }}
           COMMIT_URL: "https://github.com/${{github.repository}}/commit/${{github.sha}}"

       - name: Run client e2e tests over the prod build
         run: yarn client:e2e

       - name: Upload built app for release-web, release-electron
         uses: actions/upload-artifact@v2
         with:
           name: app
           path: resources


   release-web:
     needs: [build-app]
     # Only deploy on v2.* tag pushes to the default branch (main).
     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v2.')
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
       - uses: ./.github/custom-actions/node-env

       - name: Download built app
         uses: actions/download-artifact@v2
         with:
           name: app
           path: resources

       - name: Copy built app to a vercel prod deploy folder
         run: mkdir -p vercel-release/vercel-static/athens && cp -R resources/public/. vercel-release/vercel-static/athens/

       - uses: amondnet/vercel-action@v20
         with:
           vercel-token: ${{ secrets.VERCEL_TOKEN }}
           vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
           vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
           scope: athens-research
           vercel-args: './vercel-release/'
           # Poor mans ternary operator https://github.com/actions/runner/issues/409#issuecomment-727565588
           alias-domains: ${{ env.PRERELEASE == 'true' && env.PRERELEASE_DOMAIN || env.RELEASE_DOMAIN }}
         env:
           PRERELEASE: ${{ contains(github.ref, '-alpha.') || contains(github.ref, '-beta.') || contains(github.ref, '-rc.')}}
           PRERELEASE_DOMAIN: beta.athensresearch.org
           RELEASE_DOMAIN: web.athensresearch.org


   release-electron:
     needs: [build-app]
     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
     runs-on: ${{ matrix.os }}
     env:
       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

     strategy:
       matrix:
         os: [ubuntu-latest, windows-latest, macos-latest]

     steps:
       - uses: actions/checkout@v2
       - uses: ./.github/custom-actions/node-env

       - name: Prepare for app notarization (macOS)
         if: startsWith(matrix.os, 'macos')
         # Import Apple API key for app notarization on macOS
         run: |
           mkdir -p ~/private_keys/
           echo '${{ secrets.api_key }}' > ~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8

       - name: Download built app
         uses: actions/download-artifact@v2
         with:
           name: app
           path: resources

       - name: Build and Publish Electron App
         uses: samuelmeuli/action-electron-builder@v1
         with:

           # Don't run `yarn build`, which otherwise happens by default
           skip_build: true

           # GitHub token, automatically provided to the action
           # (No need to define this secret in the repo settings)
           github_token: ${{ secrets.github_token }}

           # macOS code signing certificate
           mac_certs: ${{ secrets.mac_certs }}
           mac_certs_password: ${{ secrets.mac_certs_password }}

           # If the commit is tagged with a version (e.g. "v1.0.0"),
           # release the app after building
           release: ${{ startsWith(github.ref, 'refs/tags/v') }}

         env:
           # macOS notarization API key
           API_KEY_ID: ${{ secrets.api_key_id }}
           API_KEY_ISSUER_ID: ${{ secrets.api_key_issuer_id }}


   release-server:
     runs-on: ubuntu-latest
     needs: [test, lint, style, carve, build-app]
     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

     steps:
       - uses: actions/checkout@v2
       - uses: ./.github/custom-actions/clojure-env

       - name: Download built app
         uses: actions/download-artifact@v2
         with:
           name: app
           path: resources

       - name: Compile server code
         run: yarn server:compile

       - name: Build server executable uberjar
         run: yarn server:uberjar

       # we need QEMU for multi-arch build
       - name: Set up QEMU
         uses: docker/setup-qemu-action@v1

       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v1

       - name: Login to Github Container registry
         uses: docker/login-action@v1
         with:
           registry: ${{ env.REGISTRY }}
           username: ${{ github.actor }}
           password: ${{ secrets.GITHUB_TOKEN }}

       - name: Extract server metadata (tags, labels) for athens docker image
         id: athens-meta
         uses: docker/metadata-action@v3
         with:
           images: ${{ env.REGISTRY }}/${{ github.repository }}

       - name: Extract server metadata (tags, labels) for nginx docker image
         id: nginx-meta
         uses: docker/metadata-action@v3
         with:
           images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/nginx

       - name: Build and push athens
         uses: docker/build-push-action@v2
         with:
           # Use the current folder as context instead of the branch.
           # Needed to use artifacts like the server jar.
           context: .
           platforms: linux/amd64,linux/arm64
           file: athens.dockerfile
           push: true
           tags: ${{ steps.athens-meta.outputs.tags }}
           labels: ${{ steps.athens-meta.outputs.labels }}
           # Use GitHub actions cache.
           # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#github-cache
           cache-from: type=gha
           cache-to: type=gha,mode=max

       - name: Build and push nginx
         uses: docker/build-push-action@v2
         with:
           context: .
           platforms: linux/amd64,linux/arm64
           file: nginx.dockerfile
           push: true
           tags: ${{ steps.nginx-meta.outputs.tags }}
           labels: ${{ steps.nginx-meta.outputs.labels }}
           cache-from: type=gha
           cache-to: type=gha,mode=max


       - name: Replace version in docker-compose
         run: sed -i.bk 's/:latest/:${{ steps.athens-meta.outputs.version }}/' docker-compose.yml

       - name: Publish Docker compose
         uses: ncipollo/release-action@v1
         with:
           artifacts: "docker-compose.yml"
           token: ${{ secrets.GITHUB_TOKEN }}
           allowUpdates: true
           prerelease: true
           draft: true
