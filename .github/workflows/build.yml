name: build

on:
  push:
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    paths-ignore:
      - '*.md'
      - 'docs/**'

env:
  REGISTRY: ghcr.io   # Github container registry https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry

jobs:

   test:
     runs-on: ubuntu-latest
     steps:
       - name: Git checkout
         uses: actions/checkout@v1
         with:
           fetch-depth: 1
           submodules: 'true'

       - uses: ./.github/custom-actions/clojure-env
       - uses: ./.github/custom-actions/node-env

       - name: Run JVM tests
         run: script/test/jvm

       - name: Compile components
         run: yarn components

       # TODO: re-enable once web build is fixed
       # - name: Run Karma tests
       #   run: script/test/karma

   lint:
     runs-on: ubuntu-latest
     steps:
       - name: Git checkout
         uses: actions/checkout@v1
         with:
           fetch-depth: 1
           submodules: 'true'

       - uses: DeLaGuardo/setup-clj-kondo@master
         with:
           version: '2021.03.03'

       - name: Lint
         run: script/lint

# # ignore for now
#   deps-check:
#     runs-on: ubuntu-18.04
#     steps:
#       - name: Git checkout
#         uses: actions/checkout@v1
#         with:
#           fetch-depth: 1
#           submodules: 'true'
#
#       - uses: ./.github/custom-actions/clojure-env
#
#       - name: Check Dependencies
#         run: lein ancient

   style:
     runs-on: ubuntu-latest
     steps:
       - name: Git checkout
         uses: actions/checkout@v1
         with:
           fetch-depth: 1
           submodules: 'true'

       - uses: ./.github/custom-actions/clojure-env

       - name: Style
         run: script/style

   carve:
     runs-on: ubuntu-latest
     steps:
       - name: Git checkout
         uses: actions/checkout@v1
         with:
           fetch-depth: 1
           submodules: 'true'

       - uses: ./.github/custom-actions/clojure-env

       - name: Carve unused vars
         run: script/carve


   release-web:
     needs: [test, lint, style, carve]
     # Only deploy on tag pushes to the default branch (main). GH pages is effectively a singleton deploy env for main.
     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && github.ref == 'refs/heads/main'
     runs-on: ubuntu-latest
     steps:
       - name: Git checkout
         uses: actions/checkout@v1
         with:
           fetch-depth: 1
           submodules: 'true'

       - uses: ./.github/custom-actions/clojure-env
       - uses: ./.github/custom-actions/node-env

       - name: Compile components
         run: yarn components

       - name: Compile app
         run: COMMIT_URL="https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}" lein run -m shadow.cljs.devtools.cli --npm release app --config-merge "{:closure-defines {athens.core/SENTRY_DSN \"${SENTRY_DSN}\" athens.util/COMMIT_URL \"${COMMIT_URL}\" }}"
         env:
           SENTRY_DSN: ${{ secrets.sentry_dsn }}

       - name: Deploy
         uses: peaceiris/actions-gh-pages@v3
         with:
           github_token: ${{ secrets.GITHUB_TOKEN }}
           publish_dir: ./resources/public
           force_orphan: true

   release-electron:
     needs: [test, lint, style, carve]
     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
     runs-on: ${{ matrix.os }}
     env:
       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

     strategy:
       matrix:
         os: [ubuntu-latest, macos-latest, windows-latest]

     steps:
       - name: Git checkout
         uses: actions/checkout@v1
         with:
           fetch-depth: 1
           submodules: 'true'

       - uses: ./.github/custom-actions/clojure-env
       - uses: ./.github/custom-actions/node-env

       - name: Prepare for app notarization (macOS)
         if: startsWith(matrix.os, 'macos')
         # Import Apple API key for app notarization on macOS
         run: |
           mkdir -p ~/private_keys/
           echo '${{ secrets.api_key }}' > ~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8

       - name: Compile components
         run: yarn components

       - name: Compile JS Assets (*nix)
         if: matrix.os != 'windows-latest'
         run: lein run -m shadow.cljs.devtools.cli --npm release main renderer --config-merge "{:closure-defines {athens.core/SENTRY_DSN \"${SENTRY_DSN}\" athens.main.core/AUTO_UPDATE ${AUTO_UPDATE}}}"
         env:
           SENTRY_DSN: ${{ secrets.sentry_dsn }}
           AUTO_UPDATE: ${{ github.ref == 'refs/heads/main' }}

       - name: Compile JS Assets (Windows)
         if: matrix.os == 'windows-latest'
         run: lein run -m shadow.cljs.devtools.cli --npm release main renderer --config-merge "{:closure-defines {athens.core/SENTRY_DSN \`"$env:SENTRY_DSN\`" athens.main.core/AUTO_UPDATE $env:AUTO_UPDATE}}"
         env:
           SENTRY_DSN: ${{ secrets.sentry_dsn }}
           AUTO_UPDATE: ${{ github.ref == 'refs/heads/main' }}

       - name: Build and Publish Electron App
         uses: samuelmeuli/action-electron-builder@v1
         with:

           # Don't run `yarn build`, which otherwise happens by default
           skip_build: true

           # GitHub token, automatically provided to the action
           # (No need to define this secret in the repo settings)
           github_token: ${{ secrets.github_token }}

           # macOS code signing certificate
           mac_certs: ${{ secrets.mac_certs }}
           mac_certs_password: ${{ secrets.mac_certs_password }}

           # If the commit is tagged with a version (e.g. "v1.0.0"),
           # release the app after building
           release: ${{ startsWith(github.ref, 'refs/tags/v') }}

           # Skip auto-update files on branches other than main.
           # Ideally we could use electron-builder release channels, but they don't work for github publishing.
           # Auto-update is also disabled in code inside athens.main.core.
           # NB: GH actions doesn't have ternary operator, but can workaround using AND/OR logic.
           # see https://github.com/actions/runner/issues/409#issuecomment-752775072
           args: ${{ github.ref != 'refs/heads/main' && '-c.publish.publishAutoUpdate=false' || '' }}

         env:
           # macOS notarization API key
           API_KEY_ID: ${{ secrets.api_key_id }}
           API_KEY_ISSUER_ID: ${{ secrets.api_key_issuer_id }}

      #  - name: Notify Alpha Testers of new release
      #    run: |
      #       curl \
      #       -H "Content-Type: application/json" \
      #       # how to ping roles manually: https://support.discord.com/hc/en-us/community/posts/360057835772-Role-Pinging-for-Bots
      #       -d '{"username": "Athens", "avatar_url": "https://github.com/athensresearch/athens-assets/raw/main/athens-512x512.png", "content": "Hey <@&${{ secrets.discord_alpha_role }}> a new release has been published \n\n[Go check it out!](https://github.com/athensresearch/athens/releases)"}' \
      #       ${{ secrets.discord_webhook }}


   release-server:
     runs-on: ubuntu-latest
     needs: [test, lint, style, carve]
     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

     steps:
       - name: Git checkout
         uses: actions/checkout@v1
         with:
           fetch-depth: 1
           submodules: 'true'

       - uses: ./.github/custom-actions/clojure-env

       - name: Build server JAR
         run: lein uberjar

       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v1

       - name: Login to Github Container registry
         uses: docker/login-action@v1
         with:
           registry: ${{ env.REGISTRY }}
           username: ${{ github.actor }}
           password: ${{ secrets.GITHUB_TOKEN }}

       - name: Extract server metadata (tags, labels) for athens docker image
         id: athens-meta
         uses: docker/metadata-action@v3
         with:
           images: ${{ env.REGISTRY }}/${{ github.repository }}

       - name: Extract server metadata (tags, labels) for nginx docker image
         id: nginx-meta
         uses: docker/metadata-action@v3
         with:
           images: ${{ env.REGISTRY }}/${{ github.repository }}-nginx

       - name: Build and push athens
         uses: docker/build-push-action@v2
         with:
           # Use the current folder as context instead of the branch.
           # Needed to use artifacts like the server jar.
           context: .
           file: athens.dockerfile
           push: true
           tags: ${{ steps.athens-meta.outputs.tags }}
           labels: ${{ steps.athens-meta.outputs.labels }}
           # Use GitHub actions cache.
           # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#github-cache
           cache-from: type=gha
           cache-to: type=gha,mode=max

       - name: Build and push nginx
         uses: docker/build-push-action@v2
         with:
           context: .
           file: nginx.dockerfile
           push: true
           tags: ${{ steps.nginx-meta.outputs.tags }}
           labels: ${{ steps.nginx-meta.outputs.labels }}
           cache-from: type=gha
           cache-to: type=gha,mode=max


       - name: Replace version in docker-compose
         run: sed -i.bk 's/:latest/:${{ steps.athens-meta.outputs.version }}/' docker-compose.yml

       - name: Publish Docker compose
         uses: ncipollo/release-action@v1
         with:
           artifacts: "docker-compose.yml"
           token: ${{ secrets.GITHUB_TOKEN }}
           allowUpdates: true
           prerelease: true
           draft: true



